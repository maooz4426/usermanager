// Package usermanage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package usermanage

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// User defines model for User.
type User struct {
	// Email userのemail
	Email *string `json:"email,omitempty"`

	// Name userの名前
	Name *string `json:"name,omitempty"`

	// Uuid userのuuid
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// UserSignInError defines model for UserSignInError.
type UserSignInError struct {
	Code   string   `json:"code"`
	Errors []string `json:"errors"`
}

// UserSignInRequest defines model for UserSignInRequest.
type UserSignInRequest struct {
	// Email userのemail
	Email string `json:"email"`

	// Password userのパスワード
	Password string `json:"password"`
}

// UserSignInResponse defines model for UserSignInResponse.
type UserSignInResponse struct {
	// Uuid userのuuid
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserSignupRequest defines model for UserSignupRequest.
type UserSignupRequest struct {
	// Email userのemail
	Email string `json:"email"`

	// Name userの名前
	Name string `json:"name"`

	// Password userのパスワード
	Password string `json:"password"`
}

// UserSignupResponse defines model for UserSignupResponse.
type UserSignupResponse struct {
	// Uuid userのuuid
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserUUID defines model for UserUUID.
type UserUUID = int64

// UserSignInJSONRequestBody defines body for UserSignIn for application/json ContentType.
type UserSignInJSONRequestBody = UserSignInRequest

// UserSignUpJSONRequestBody defines body for UserSignUp for application/json ContentType.
type UserSignUpJSONRequestBody = UserSignupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /users/signin)
	UserSignIn(ctx echo.Context) error

	// (POST /users/signup)
	UserSignUp(ctx echo.Context) error

	// (GET /users/{uuid})
	GetUser(ctx echo.Context, uuid UserUUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UserSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) UserSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserSignIn(ctx)
	return err
}

// UserSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) UserSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserSignUp(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid UserUUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users/signin", wrapper.UserSignIn)
	router.POST(baseURL+"/users/signup", wrapper.UserSignUp)
	router.GET(baseURL+"/users/:uuid", wrapper.GetUser)

}
